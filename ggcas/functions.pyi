from typing import List, Union
from numpy.typing import ArrayLike
from astropy import units as u

class AngularSeparation:
    def __init__(
        self, ra0: Union[float, u.Quantity], dec0: Union[float, u.Quantity]
    ) -> None: ...
    def _get_formula(self) -> None: ...
    def compute(self, data: List[ArrayLike]) -> ArrayLike: ...
    def compute_error(
        self, data: List[ArrayLike], errors: List[ArrayLike], corr: ArrayLike = None
    ) -> ArrayLike: ...

class LosDistance:
    def __init__(self) -> None: ...
    def _get_formula(self) -> None: ...
    def compute(self, data: List[ArrayLike]) -> ArrayLike: ...
    def compute_error(
        self, data: List[ArrayLike], errors: List[ArrayLike], corr: ArrayLike = None
    ) -> ArrayLike: ...

class RadialDistance2D:
    def __init__(self, gc_distance: Union[float, u.Quantity]) -> None: ...
    def _get_formula(self) -> None: ...
    def compute(self, data: List[ArrayLike]) -> ArrayLike: ...
    def compute_error(
        self, data: List[ArrayLike], errors: List[ArrayLike], corr: ArrayLike = None
    ) -> ArrayLike: ...

class RadialDistance3D:
    def __init__(
        self, extended: bool = False, gc_distance: Union[float, u.Quantity] = None
    ) -> None: ...
    def _get_formula(self) -> None: ...
    def compute(self, data: List[ArrayLike]) -> ArrayLike: ...
    def compute_error(
        self, data: List[ArrayLike], errors: List[ArrayLike], corr: ArrayLike = None
    ) -> ArrayLike: ...

class TotalVelocity:
    def __init__(self) -> None: ...
    def _get_formula(self) -> None: ...
    def compute(self, data: List[ArrayLike]) -> ArrayLike: ...
    def compute_error(
        self, data: List[ArrayLike], errors: List[ArrayLike], corr: ArrayLike = None
    ) -> ArrayLike: ...

class EffectivePotential:
    def __init__(self, shell: bool = False) -> None: ...
    def _get_formula(self) -> None: ...
    def compute(self, data: List[ArrayLike]) -> ArrayLike: ...
    def compute_error(
        self, data: List[ArrayLike], errors: List[ArrayLike], corr: ArrayLike = None
    ) -> ArrayLike: ...
